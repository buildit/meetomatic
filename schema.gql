# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthPayload {
  token: String!
  user: User!
}

type Board {
  id: String!
  name: String!
  maxVotes: Float!
  columns: [Column!]
  owner: User!
}

type BoardNotification {
  boardId: String!
  updates: [BoardUpdate!]!
}

union BoardUpdate = CardCreatedUpdate | CardMovedUpdate | CardRenamedUpdate | CardUpvotedUpdate | CardDownvotedUpdate

type Card {
  id: String!
  description: String!
  column: Column!
  owner: User!
  votes: [Vote!]
}

type CardCreatedUpdate {
  card: Card!
}

type CardDownvotedUpdate {
  card: Card!
  voteId: String!
}

type CardMovedUpdate {
  card: Card!
}

type CardPayload {
  card: Card!
}

type CardRenamedUpdate {
  card: Card!
}

type CardUpvotedUpdate {
  card: Card!
  vote: Vote!
}

type Column {
  id: String!
  name: String!
  cards: [Card!]
}

input CreateBoardInput {
  name: String!
  password: String!
  columns: [CreateColumnInput!]!
}

type CreateBoardPayload {
  board: Board!
}

input CreateCardInput {
  description: String!
  columnId: String!
}

type CreateCardPayload {
  card: Card!
}

input CreateColumnInput {
  name: String!
}

type DownvoteCardPayload {
  card: Card!
  voteId: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createCard(input: CreateCardInput!): CreateCardPayload!
  updateCard(input: UpdateCardInput!, id: String!): UpdateCardPayload!
  upvoteCard(input: UpvoteCardInput!): UpvoteCardPayload!
  downvoteCard(cardId: String!): DownvoteCardPayload!
  signup(input: SignUpInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  createBoard(input: CreateBoardInput!): CreateBoardPayload!
}

type Query {
  currentUser: User
  boards: [Board!]!
  board(id: String!): Board
}

input SetCardArchivedInput {
  archivedOn: String!
}

input SetCardColumnInput {
  columnId: String!
}

input SetCardDescriptionInput {
  description: String!
}

input SignUpInput {
  email: String!
  password: String!
  name: String!
}

type Subscription {
  boardUpdated(boardId: String!): BoardNotification!
}

input UpdateCardInput {
  setColumn: SetCardColumnInput
  setDescription: SetCardDescriptionInput
  setArchivedOn: SetCardArchivedInput
}

type UpdateCardPayload {
  card: Card!
}

input UpvoteCardInput {
  cardId: String!
}

type UpvoteCardPayload {
  card: Card!
  vote: Vote!
}

type User {
  id: String!
  email: String!
  name: String!
}

type Vote {
  id: String!
  owner: User!
  card: Card!
}
